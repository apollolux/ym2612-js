{"name":"ym2612.js","body":"### Some Retro FM Synthesis Action\r\nThis is a basic emulation of the Yamaha YM2612 synthesis chip written entirely in JavaScript. The intention is primarily to mockup interaction of a YM2612 core with an implementation of Steinberg's *VST* audio toolkit. This core is based entirely on the open-source C-based YM2612 core found in the Wii port of the Genesis Plus emulator.\r\n\r\n* Genesis Plus can be found at [http://code.google.com/p/genplus-gx](http://code.google.com/p/genplus-gx)\r\n* VST can be found at [http://www.steinberg.net/en/company/developer.html](http://www.steinberg.net/en/company/developer.html)\r\n* Basic JavaScript implementation of VST by myself (as proof-of-concept for my mockup purposes) soon to follow!\r\n\r\n### Get It\r\nDownload either the minified ym2612.min.js or the uncompressed ym2612.js file and put it in a location accessible to your JavaScript-based application.\r\n\r\n### Use It\r\nDeclare a YM2612 object, then initialize its internal clock speed (NTSC used 7670445) and your app's sample rate. Start passing YM2612 commands to it and update it to generate the actual samples. Please note the YM2612 only generates sample data, so you'll need an audio sink to actually send that data to speakers; [XAudioJS](http://github.com/grantgalitz/XAudioJS) by @grantgalitz is an excellent cross-browser solution.\r\n\r\n### Authors and Contributors\r\nym2612.js was written by Alex Rosario, ported from code found in [Genesis Plus GX](http://code.google.com/p/genplus-gx).\r\n\r\n### License\r\nym2612.js is available under an MIT license and no warranty is expressed, implied, or otherwise provided by Alex Rosario; please only use it for good and not for evil, thanks.","tagline":"A YM2612 core written in JavaScript","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}